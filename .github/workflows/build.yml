name: Build APK
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK and NDK
      run: |
        echo "Installing Android SDK components..."
        # 设置SDK和NDK版本
        SDK_VERSION="34"
        NDK_VERSION="25.2.9519653"
        BUILD_TOOLS_VERSION="34.0.0"
        
        # 设置基础路径
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        
        # 添加SDK工具到PATH
        export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${PATH}"
        
        # 创建必要的目录
        mkdir -p "${ANDROID_HOME}/licenses"
        
        # 添加许可证
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "${ANDROID_HOME}/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "${ANDROID_HOME}/licenses/android-sdk-license"
        
        # 安装SDK组件
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1
        echo "Installing SDK components..."
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-${SDK_VERSION}" \
            "build-tools;${BUILD_TOOLS_VERSION}" \
            "ndk;${NDK_VERSION}" \
            "cmake;3.22.1" \
            --verbose
            
        # 设置NDK路径
        export ANDROID_NDK_HOME="${ANDROID_HOME}/ndk/${NDK_VERSION}"
        export ANDROID_NDK_ROOT="${ANDROID_HOME}/ndk/${NDK_VERSION}"
        
        # 验证NDK安装
        echo "Verifying NDK installation..."
        if [ -d "${ANDROID_NDK_HOME}" ] && [ -f "${ANDROID_NDK_HOME}/ndk-build" ]; then
            echo "NDK installed successfully at: ${ANDROID_NDK_HOME}"
            echo "NDK version: $(cat ${ANDROID_NDK_HOME}/source.properties | grep Pkg.Revision)"
        else
            echo "Error: NDK installation verification failed"
            echo "ANDROID_NDK_HOME: ${ANDROID_NDK_HOME}"
            echo "Directory contents:"
            ls -la "${ANDROID_HOME}/ndk"
            exit 1
        fi
        
        # 导出环境变量
        {
            echo "ANDROID_HOME=${ANDROID_HOME}"
            echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
            echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME}"
            echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
            echo "PATH=${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${PATH}"
        } >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel setuptools
        python -m pip install --upgrade cython==3.0.2
        python -m pip install --upgrade kivy==2.2.1
        python -m pip install --upgrade pillow==10.0.0
        python -m pip install --upgrade buildozer==1.5.0
        python -m pip install --upgrade python-for-android
        
        # 创建虚拟环境以隔离依赖
        python -m venv venv
        source venv/bin/activate
        
        # 安装项目依赖
        pip install -r requirements.txt || true  # 忽略错误，因为某些依赖可能已经安装
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          libpangoft2-1.0-0 \
          libjpeg-dev \
          libfreetype6-dev \
          gcc \
          make \
          openjdk-17-jdk

    - name: Build APK
      run: |
        echo "Starting APK build..."
        echo "当前工作目录: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer --version)"
        
        # 确保bin目录存在
        mkdir -p bin
        
        # 显示并验证环境变量
        echo "Environment variables:"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "JAVA_HOME=$JAVA_HOME"
        
        # 验证环境
        if [ ! -d "$ANDROID_SDK_ROOT" ]; then
          echo "Error: Android SDK not found at $ANDROID_SDK_ROOT"
          exit 1
        fi
        if [ ! -d "$ANDROID_NDK_HOME" ]; then
          echo "Error: Android NDK not found at $ANDROID_NDK_HOME"
          exit 1
        fi
        
        # 清理和准备构建环境
        echo "清理构建目录..."
        rm -rf .buildozer
        rm -rf bin/*.apk
        mkdir -p .buildozer
        
        # 显示buildozer.spec内容
        echo "当前buildozer.spec配置:"
        cat buildozer.spec
        
        # 安装必要的依赖
        pip install --upgrade buildozer==1.5.0 python-for-android
        
        # 检查Python依赖
        python -m pip freeze | grep -E "kivy|pillow|cython"
        
        # 使用详细日志构建
        echo "开始构建APK..."
        buildozer android debug -v 2>&1 | tee buildozer.log
        BUILD_RESULT=$?
        
        echo "构建完成，检查结果..."
        if [ $BUILD_RESULT -ne 0 ]; then
          echo "构建失败。显示日志末尾:"
          tail -n 100 buildozer.log
          exit 1
        fi
        
        # 显示构建输出
        echo "列出所有目录中的APK文件:"
        find . -name "*.apk" -type f -print

    - name: Prepare APK for Upload
      run: |
        echo "准备APK文件上传..."
        
        # 创建上传目录
        mkdir -p ./upload-apk
        
        # 列出所有目录结构
        echo "显示完整目录结构:"
        find . -type d
        
        # 查找并显示所有APK文件
        echo "查找所有APK文件:"
        find . -name "*.apk" -type f -ls
        
        # 尝试从所有可能的位置复制APK文件
        echo "复制APK文件到上传目录..."
        cp -v bin/*.apk ./upload-apk/ 2>/dev/null || true
        cp -v .buildozer/android/platform/build-*/dists/*/*.apk ./upload-apk/ 2>/dev/null || true
        cp -v .buildozer/android/app/build/outputs/apk/*/*.apk ./upload-apk/ 2>/dev/null || true
        
        echo "上传目录内容:"
        ls -la ./upload-apk/
        
        if [ -z "$(ls -A ./upload-apk/)" ]; then
          echo "错误：上传目录为空"
          echo "显示构建日志末尾:"
          tail -n 200 buildozer.log
          exit 1
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: ./upload-apk/
        retention-days: 90
        if-no-files-found: error
