name: Build APK
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        
    - name: Cache Android NDK
      uses: actions/cache@v4
      with:
        path: ~/.buildozer/android/platform/android-ndk-r25b
        key: android-ndk-r25b

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK and NDK
      run: |
        echo "Installing Android SDK components..."
        # 设置SDK版本
        SDK_VERSION="34"
        BUILD_TOOLS_VERSION="34.0.0"
        
        # 设置基础路径
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        
        # 添加SDK工具到PATH
        export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${PATH}"
        
        # 创建必要的目录
        mkdir -p "${ANDROID_HOME}/licenses"
        
        # 添加许可证
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "${ANDROID_HOME}/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "${ANDROID_HOME}/licenses/android-sdk-license"
        
        # 安装SDK组件
        yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1
        echo "Installing SDK components..."
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "platforms;android-${SDK_VERSION}" \
            "build-tools;${BUILD_TOOLS_VERSION}" \
            "cmake;3.22.1" \
            --verbose
            
        # 导出环境变量
        {
            echo "ANDROID_HOME=${ANDROID_HOME}"
            echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
            echo "PATH=${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${PATH}"
        } >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel setuptools
        python -m pip install --upgrade cython==3.0.2
        python -m pip install --upgrade kivy==2.2.1
        python -m pip install --upgrade pillow==10.0.0
        python -m pip install --upgrade buildozer==1.5.0
        python -m pip install --upgrade python-for-android
        
        # 安装项目依赖
        pip install -r requirements.txt || true  # 忽略错误，因为某些依赖可能已经安装
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          libpangoft2-1.0-0 \
          libjpeg-dev \
          libfreetype6-dev \
          gcc \
          make \
          openjdk-17-jdk

    - name: Build APK with retry mechanism
      run: |
        echo "Starting APK build with retry mechanism..."
        echo "Python version:"
        python --version
        echo "Buildozer version:"
        buildozer --version
        
        # 设置p4a
        export P4A_RELEASE_KEYSTORE=~/.buildozer/android/platform/release-key.keystore
        export P4A_RELEASE_KEYSTORE_PASSWD=android
        export P4A_RELEASE_KEYALIAS_PASSWD=android
        export P4A_RELEASE_KEYALIAS=android
        
        # 确保构建目录存在
        mkdir -p .buildozer
        
        # 检查Python依赖
        python -c "import kivy; print('Kivy version:', kivy.__version__)"
        python -c "from PIL import Image; print('Pillow version:', Image.__version__)"
        python -c "import cython; print('Cython version:', cython.__version__)"
        
        # 尝试最多3次构建
        MAX_RETRIES=3
        RETRY_COUNT=0
        BUILD_SUCCESS=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$BUILD_SUCCESS" = "false" ]; do
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "尝试构建 #$RETRY_COUNT..."
          
          # 使用详细日志构建
          echo "开始构建APK..."
          if buildozer android debug -v --verbose | tee buildozer.log; then
            BUILD_SUCCESS=true
            echo "构建成功完成。"
          else
            BUILD_RESULT=$?
            echo "构建失败，返回码: $BUILD_RESULT"
            echo "显示buildozer日志末尾:"
            tail -n 100 buildozer.log
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "等待10秒后重试..."
              sleep 10
            fi
          fi
        done
        
        if [ "$BUILD_SUCCESS" = "false" ]; then
          echo "构建在 $MAX_RETRIES 次尝试后仍然失败。"
          exit 1
        fi

    - name: Locate and Upload APK
      run: |
        echo "正在搜索并上传APK文件..."
        
        # 创建上传目录
        mkdir -p apks
        
        # 搜索所有APK文件并复制到上传目录
        echo "查找所有APK文件..."
        find . -name "*.apk" -type f -print
        find . -name "*.apk" -type f -exec cp {} apks/ \;
        
        # 检查是否找到APK文件
        if [ "$(ls -A apks)" ]; then
          echo "找到以下APK文件:"
          ls -la apks/
        else
          echo "未找到APK文件"
          echo "显示构建目录内容："
          ls -R .buildozer/ || echo ".buildozer目录不存在"
          
          # 搜索可能的APK文件位置
          echo "在更多位置搜索APK文件:"
          find . -type f -name "*.apk" -o -name "*buildozer*" | head -20
          
          # 创建一个包含详细构建信息的文件
          echo "Build completed at: $(date)" > build_result.txt
          echo "Build result: No APK generated" >> build_result.txt
          echo "Debug information:" >> build_result.txt
          echo "Current directory: $(pwd)" >> build_result.txt
          echo "Directory contents:" >> build_result.txt
          ls -la >> build_result.txt
          echo ".buildozer contents:" >> build_result.txt
          ls -la .buildozer >> build_result.txt 2>&1 || echo ".buildozer directory does not exist" >> build_result.txt
        fi

    - name: Upload Build Results
      uses: actions/upload-artifact@v4
      with:
        name: build-results
        path: |
          apks/
          build_result.txt
          buildozer.log
        retention-days: 90
        if-no-files-found: ignore